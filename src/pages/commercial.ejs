<!DOCTYPE html>
<html lang="fr" class="h-100">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Commerciaux</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        main {
            flex: 1;
        }
        .auth-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        .auth-modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .auth-modal-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 100%;
            max-width: 400px;
        }
    </style>
</head>
<body class="d-flex flex-column h-100 <%= locals.isAdmin ? 'bg-dark text-white' : '' %>">
    <%- include('../components/header') %>

    <!-- Modal d'authentification -->
    <div id="authModal" class="auth-modal">
        <div class="auth-modal-content">
            <h2 class="mb-4">Connexion requise</h2>
            <form id="authForm" onsubmit="return false;">
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="authEmail" required>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Mot de passe</label>
                    <input type="password" class="form-control" id="authPassword" required>
                </div>
                <div class="alert alert-danger d-none" id="authError"></div>
                <button type="button" class="btn btn-primary" onclick="login()">Se connecter</button>
            </form>
        </div>
    </div>

    <main class="flex-shrink-0">
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Nos commerciaux</h1>
                <button class="btn btn-success" onclick="ajouterCommercial()">
                    <i class="fas fa-plus"></i> Ajouter un commercial
                </button>
            </div>
            <div id="commercials-container" class="row">
                <!-- Les commerciaux seront affichés ici -->
            </div>
        </div>
    </main>

    <%- include('../components/footer') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Supprimer le token au chargement de la page
        window.addEventListener('load', function() {
            localStorage.removeItem('token');
            showAuthModal();
        });

        // Vérifier l'authentification au chargement
        document.addEventListener('DOMContentLoaded', function() {
            if (!localStorage.getItem('token')) {
                showAuthModal();
            } else {
                loadCommerciaux();
            }
        });

        // Fonction pour afficher le modal d'authentification
        function showAuthModal() {
            document.getElementById('authModal').classList.add('show');
        }

        // Fonction pour cacher le modal d'authentification
        function hideAuthModal() {
            document.getElementById('authModal').classList.remove('show');
        }

        // Fonction de connexion
        async function login() {
            try {
                const email = document.getElementById('authEmail').value;
                const password = document.getElementById('authPassword').value;

                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, password })
                });

                const data = await response.json();

                if (response.ok) {
                    localStorage.setItem('token', data.token);
                    hideAuthModal();
                    loadCommerciaux();
                } else {
                    document.getElementById('authError').textContent = data.message || 'Erreur de connexion';
                    document.getElementById('authError').classList.remove('d-none');
                }
            } catch (error) {
                console.error('Erreur:', error);
                document.getElementById('authError').textContent = 'Erreur de connexion';
                document.getElementById('authError').classList.remove('d-none');
            }
        }

        // Fonction pour charger les commerciaux
        async function loadCommerciaux() {
            try {
                const response = await fetch('/api/commercials', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const commerciaux = await response.json();
                const container = document.getElementById('commercials-container');
                container.innerHTML = '';
                
                if (!commerciaux.data || commerciaux.data.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">Aucun commercial disponible</div>';
                    return;
                }
                
                const isDarkMode = document.body.classList.contains('bg-dark');
                
                commerciaux.data.forEach(commercial => {
                    const commercialCard = `
                        <div class="col-md-4 mb-4">
                            <div class="card h-100 ${isDarkMode ? 'bg-dark text-white' : ''} border-primary">
                                <div class="card-body">
                                    <h5 class="card-title">${commercial.prenom} ${commercial.nom}</h5>
                                    <div class="mt-3">
                                        <p class="mb-2">
                                            <span class="badge bg-info">Email: ${commercial.email || 'N/A'}</span>
                                        </p>
                                        <p class="mb-2">
                                            <span class="badge ${commercial.est_actif ? 'bg-success' : 'bg-danger'}">
                                                ${commercial.est_actif ? 'Actif' : 'Inactif'}
                                            </span>
                                        </p>
                                    </div>
                                    <div class="mt-3 d-flex gap-2 justify-content-between">
                                        <button class="btn btn-outline-primary" onclick="voirDetails(${commercial.id_commercial})">
                                            <i class="fas fa-eye"></i> Voir
                                        </button>
                                        <button type="button" class="btn btn-warning" onclick="modifierCommercial(${commercial.id_commercial})">
                                            <i class="fas fa-edit"></i> Modifier
                                        </button>
                                        <button class="btn btn-danger" onclick="supprimerCommercial(${commercial.id_commercial})">
                                            <i class="fas fa-trash"></i> Supprimer
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', commercialCard);
                });
                
            } catch (error) {
                console.error('Erreur:', error);
                document.getElementById('commercials-container').innerHTML = 
                    `<div class="alert alert-danger">Erreur lors du chargement des commerciaux</div>`;
            }
        }

        // Fonction pour ajouter un commercial
        async function ajouterCommercial() {
            const modalHtml = `
                <div class="modal fade" id="addCommercialModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                            <div class="modal-header">
                                <h5 class="modal-title">Ajouter un nouveau commercial</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                            </div>
                            <div class="modal-body">
                                <form id="addCommercialForm" onsubmit="return false;">
                                    <div class="mb-3">
                                        <label for="prenom" class="form-label">Prénom</label>
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="fas fa-user"></i>
                                            </span>
                                            <input type="text" 
                                                   class="form-control" 
                                                   id="prenom" 
                                                   required>
                                            <div class="invalid-feedback">
                                                Le prénom est requis
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="nom" class="form-label">Nom</label>
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="fas fa-user"></i>
                                            </span>
                                            <input type="text" 
                                                   class="form-control" 
                                                   id="nom" 
                                                   required>
                                            <div class="invalid-feedback">
                                                Le nom est requis
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="email" class="form-label">Email</label>
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="fas fa-envelope"></i>
                                            </span>
                                            <input type="email" 
                                                   class="form-control" 
                                                   id="email" 
                                                   pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                                                   placeholder="exemple@domaine.com"
                                                   required>
                                            <div class="invalid-feedback">
                                                Veuillez entrer une adresse email valide
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input type="checkbox" 
                                                   class="form-check-input" 
                                                   id="est_actif" 
                                                   checked>
                                            <label class="form-check-label" for="est_actif">
                                                Compte actif
                                            </label>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                <button type="button" class="btn btn-primary" onclick="soumettreNouveauCommercial()">
                                    <i class="fas fa-plus"></i> Ajouter
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Supprimer l'ancien modal s'il existe
            const oldModal = document.getElementById('addCommercialModal');
            if (oldModal) {
                oldModal.remove();
            }

            // Ajouter le nouveau modal
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // Initialiser et afficher le modal
            const modal = new bootstrap.Modal(document.getElementById('addCommercialModal'));
            modal.show();

            // Ajouter la validation en temps réel
            const form = document.getElementById('addCommercialForm');
            const inputs = form.querySelectorAll('input[required]');
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    } else {
                        this.classList.remove('is-valid');
                        this.classList.add('is-invalid');
                    }
                });
            });
        }

        // Fonction pour soumettre un nouveau commercial
        async function soumettreNouveauCommercial() {
            try {
                const form = document.getElementById('addCommercialForm');
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                const formData = {
                    prenom: document.getElementById('prenom').value.trim(),
                    nom: document.getElementById('nom').value.trim(),
                    email: document.getElementById('email').value.trim(),
                    est_actif: document.getElementById('est_actif').checked
                };

                const response = await fetch('/api/commercials', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                }

                const result = await response.json();

                // Fermer le modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addCommercialModal'));
                modal.hide();
                document.getElementById('addCommercialModal').remove();
                
                // Recharger la liste des commerciaux
                await loadCommerciaux();

                // Afficher un message de succès
                const alertHtml = `
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        Commercial ajouté avec succès
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
                    </div>
                `;
                
                document.querySelector('.container').insertAdjacentHTML('afterbegin', alertHtml);

                // Supprimer l'alerte après 3 secondes
                setTimeout(() => {
                    const alert = document.querySelector('.alert');
                    if (alert) {
                        alert.remove();
                    }
                }, 3000);

            } catch (error) {
                console.error('Erreur:', error);
                alert(`Erreur lors de l'ajout du commercial: ${error.message}`);
            }
        }

        // Fonction pour modifier un commercial
        async function modifierCommercial(id) {
            try {
                const response = await fetch(`/api/commercials/${id}`, {
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const data = await response.json();
                const commercial = data.data;

                if (!commercial) {
                    throw new Error('Commercial non trouvé');
                }

                const modalHtml = `
                    <div class="modal fade" id="editCommercialModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                                <div class="modal-header">
                                    <h5 class="modal-title">Modifier le commercial</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="editCommercialForm" onsubmit="return false;">
                                        <div class="mb-3">
                                            <label for="edit_prenom" class="form-label">Prénom</label>
                                            <div class="input-group">
                                                <span class="input-group-text">
                                                    <i class="fas fa-user"></i>
                                                </span>
                                                <input type="text" 
                                                       class="form-control" 
                                                       id="edit_prenom" 
                                                       value="${commercial.prenom || ''}"
                                                       required>
                                                <div class="invalid-feedback">
                                                    Le prénom est requis
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_nom" class="form-label">Nom</label>
                                            <div class="input-group">
                                                <span class="input-group-text">
                                                    <i class="fas fa-user"></i>
                                                </span>
                                                <input type="text" 
                                                       class="form-control" 
                                                       id="edit_nom" 
                                                       value="${commercial.nom || ''}"
                                                       required>
                                                <div class="invalid-feedback">
                                                    Le nom est requis
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_email" class="form-label">Email</label>
                                            <div class="input-group">
                                                <span class="input-group-text">
                                                    <i class="fas fa-envelope"></i>
                                                </span>
                                                <input type="email" 
                                                       class="form-control" 
                                                       id="edit_email" 
                                                       value="${commercial.email || ''}"
                                                       pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                                                       required>
                                                <div class="invalid-feedback">
                                                    Veuillez entrer une adresse email valide
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input type="checkbox" 
                                                       class="form-check-input" 
                                                       id="edit_est_actif" 
                                                       ${commercial.est_actif ? 'checked' : ''}>
                                                <label class="form-check-label" for="edit_est_actif">
                                                    Compte actif
                                                </label>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                    <button type="button" class="btn btn-primary" onclick="soumettreModificationCommercial(${commercial.id_commercial})">
                                        <i class="fas fa-save"></i> Enregistrer
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Supprimer l'ancien modal s'il existe
                const oldModal = document.getElementById('editCommercialModal');
                if (oldModal) {
                    oldModal.remove();
                }

                // Ajouter le nouveau modal
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Initialiser et afficher le modal
                const modal = new bootstrap.Modal(document.getElementById('editCommercialModal'));
                modal.show();

                // Ajouter la validation en temps réel
                const form = document.getElementById('editCommercialForm');
                const inputs = form.querySelectorAll('input[required]');
                inputs.forEach(input => {
                    input.addEventListener('input', function() {
                        if (this.checkValidity()) {
                            this.classList.remove('is-invalid');
                            this.classList.add('is-valid');
                        } else {
                            this.classList.remove('is-valid');
                            this.classList.add('is-invalid');
                        }
                    });
                });

            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la récupération des données du commercial');
            }
        }

        // Fonction pour soumettre la modification d'un commercial
        async function soumettreModificationCommercial(id) {
            try {
                const form = document.getElementById('editCommercialForm');
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                const formData = {
                    prenom: document.getElementById('edit_prenom').value.trim(),
                    nom: document.getElementById('edit_nom').value.trim(),
                    email: document.getElementById('edit_email').value.trim(),
                    est_actif: document.getElementById('edit_est_actif').checked
                };

                const response = await fetch(`/api/commercials/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                }

                const result = await response.json();
                
                // Fermer le modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('editCommercialModal'));
                modal.hide();
                document.getElementById('editCommercialModal').remove();

                // Recharger la liste des commerciaux
                await loadCommerciaux();

                // Afficher un message de succès
                const alertHtml = `
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        Commercial modifié avec succès
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
                    </div>
                `;
                                
                document.querySelector('.container').insertAdjacentHTML('afterbegin', alertHtml);
                
                // Supprimer l'alerte après 3 secondes
                setTimeout(() => {
                    const alert = document.querySelector('.alert');
                    if (alert) {
                        alert.remove();
                    }
                }, 3000);

            } catch (error) {
                console.error('Erreur:', error);
                alert(`Erreur lors de la modification du commercial: ${error.message}`);
            }
        }

        // Fonction pour voir les détails d'un commercial
        async function voirDetails(id) {
            try {
                const response = await fetch(`/api/commercials/${id}`, {
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const data = await response.json();
                const commercial = data.data;

                if (!commercial) {
                    throw new Error('Commercial non trouvé');
                }

                const modalHtml = `
                    <div class="modal fade" id="detailsCommercialModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                                <div class="modal-header">
                                    <h5 class="modal-title">Détails du commercial</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="card ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''} border-primary">
                                        <div class="card-body">
                                            <h6 class="card-subtitle mb-3 text-muted">Informations personnelles</h6>
                                            <p><strong>Prénom:</strong> ${commercial.prenom || 'Non renseigné'}</p>
                                            <p><strong>Nom:</strong> ${commercial.nom || 'Non renseigné'}</p>
                                            <p><strong>Email:</strong> ${commercial.email || 'Non renseigné'}</p>
                                            <p><strong>Statut:</strong> 
                                                <span class="badge ${commercial.est_actif ? 'bg-success' : 'bg-danger'}">
                                                    ${commercial.est_actif ? 'Actif' : 'Inactif'}
                                                </span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                    <button type="button" class="btn btn-warning" onclick="modifierCommercial(${commercial.id_commercial})">
                                        <i class="fas fa-edit"></i> Modifier
                                    </button>
                            
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Supprimer l'ancien modal s'il existe
                const oldModal = document.getElementById('detailsCommercialModal');
                if (oldModal) {
                    oldModal.remove();
                }

                // Ajouter le nouveau modal
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Initialiser et afficher le modal
                const modal = new bootstrap.Modal(document.getElementById('detailsCommercialModal'));
                modal.show();

            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la récupération des détails du commercial');
            }
        }

        // Fonction pour supprimer un commercial
        async function supprimerCommercial(id) {
            try {
                const modalHtml = `
                    <div class="modal fade" id="deleteCommercialModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                                <div class="modal-header">
                                    <h5 class="modal-title">Confirmer la suppression</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Êtes-vous sûr de vouloir supprimer ce commercial ?</p>
                                    <p class="text-danger">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        Cette action est irréversible.
                                    </p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                    <button type="button" class="btn btn-danger" onclick="confirmerSuppression(${id})">
                                        <i class="fas fa-trash"></i> Supprimer
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Supprimer l'ancien modal s'il existe
                const oldModal = document.getElementById('deleteCommercialModal');
                if (oldModal) {
                    oldModal.remove();
                }

                // Ajouter le nouveau modal
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Afficher le modal
                const modal = new bootstrap.Modal(document.getElementById('deleteCommercialModal'));
                modal.show();
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la préparation de la suppression');
            }
        }

        // Fonction pour confirmer la suppression
        async function confirmerSuppression(id) {
            try {
                const response = await fetch(`/api/commercials/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                }

                // Fermer le modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteCommercialModal'));
                modal.hide();
                document.getElementById('deleteCommercialModal').remove();

                // Recharger la liste des commerciaux
                await loadCommerciaux();

                // Afficher un message de succès
                const alertHtml = `
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        Commercial supprimé avec succès
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
                    </div>
                `;

                document.querySelector('.container').insertAdjacentHTML('afterbegin', alertHtml);

                // Supprimer l'alerte après 3 secondes
                setTimeout(() => {
                    const alert = document.querySelector('.alert');
                    if (alert) {
                        alert.remove();
                    }
                }, 3000);

            } catch (error) {
                console.error('Erreur:', error);
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteCommercialModal'));
                if (modal) {
                    modal.hide();
                    document.getElementById('deleteCommercialModal').remove();
                }
                alert(`Erreur lors de la suppression du commercial: ${error.message}`);
            }
        }
    </script>
</body>
</html>
