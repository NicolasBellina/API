<!DOCTYPE html>
<html lang="fr" class="h-100">
<head>
    <!-- Encodage du contenu -->
    <meta charset="UTF-8">
    <!-- Contrôle de la taille de l'écran -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Titre de la page -->
    <title>Produits</title>
    <!-- Feuille de style de Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Mise en page flexible */
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        /* Mise en page du contenu principal */
        main {
            /* Prendre tout l'espace disponible */
            flex: 1;
        }
    </style>
</head>
<body class="d-flex flex-column h-100 <%= locals.isAdmin ? 'bg-dark text-white' : '' %>">
    <%- include('../components/header') %>

    <!-- Contenu principal -->
    <main class="flex-shrink-0">
        <!-- Contenu principal ici -->
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Nos produits</h1>
                <button class="btn btn-success" onclick="ajouterProduit()">
                    <i class="fas fa-plus"></i> Ajouter un produit
                </button>
            </div>
            <div id="products-container" class="row">
                <!-- Les produits seront affichés ici -->
            </div>
        </div>
    </main>

    <!-- Pied de page -->
    <%- include('../components/footer') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        async function loadProducts() {
            try {
                console.log('Début du chargement des produits');
                const response = await fetch('/api/products', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const products = await response.json();
                console.log('Données reçues:', products);
                
                const container = document.getElementById('products-container');
                
                if (!products || products.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">Aucun produit disponible</div>';
                    return;
                }
                
                
                const row = document.createElement('div');
                row.className = 'row g-4';
                
                // Vérifier si le body a la classe bg-dark pour déterminer le thème
                const isDarkMode = document.body.classList.contains('bg-dark');
                
                products.forEach(product => {
                    const productCard = `
                        <div class="col-md-4 mb-4">
                            <div class="card h-100 ${isDarkMode ? 'bg-dark text-white' : ''} border-primary">
                                <div class="card-body">
                                    <h5 class="card-title">${product.nom}</h5>
                                    <p class="card-text">${product.description || 'Aucune description'}</p>
                                    <div class="mt-3">
                                        <p class="mb-2">
                                            <span class="badge bg-primary">Prix: ${product.prix} €</span>
                                            <span class="badge bg-secondary">Stock: ${product.quantite_stock}</span>
                                        </p>
                                        <p class="mb-2">
                                            <span class="badge bg-info">Type: ${product.type_produit}</span>
                                            <span class="badge bg-info">Taille: ${product.taille_id || 'N/A'}</span>
                                        </p>
                                        <p class="mb-2">
                                            <span class="badge bg-info">Couleur: ${product.couleur_id || 'N/A'}</span>
                                            <span class="badge bg-info">Marque: ${product.marque_id || 'N/A'}</span>
                                        </p>
                                    </div>
                                    <div class="mt-3 d-flex gap-2 justify-content-between">
                                        <button class="btn btn-outline-primary" onclick="voirDetails(${product.id_produit})">
                                            <i class="fas fa-eye"></i> Voir détails
                                        </button>
                                        <button class="btn btn-warning" onclick="modifierProduit(${product.id_produit})">
                                            <i class="fas fa-edit"></i> Modifier
                                        </button>
                                        <button class="btn btn-danger" onclick="supprimerProduit(${product.id_produit})">
                                            <i class="fas fa-trash"></i> Supprimer
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    row.innerHTML += productCard;
                });
                
                container.appendChild(row);
                
            } catch (error) {
                console.error('Erreur détaillée:', error);
                document.getElementById('products-container').innerHTML = 
                    `<div class="alert alert-danger">
                        Erreur lors du chargement des produits: ${error.message}
                    </div>`;
            }
        }

        // Charger les produits au chargement de la page
        window.addEventListener('load', loadProducts);

        // // Ajoutez ces fonctions après loadProducts()
        // async function modifierProduit(id) {
        //     try {
        //         if (confirm('Voulez-vous vraiment modifier ce produit ?')) {
        //             const response = await fetch(`/api/products/${id}`, {
        //                 method: 'PUT',
        //                 headers: {
        //                     'Content-Type': 'application/json'
        //                 },
        //                 body: JSON.stringify({
        //                     // Ajoutez ici les données à modifier
        //                 })
        //             });
                    
        //             if (!response.ok) {
        //                 throw new Error(`HTTP error! status: ${response.status}`);
        //             }
                    
        //             alert('Produit modifié avec succès');
        //             loadProducts(); // Recharger la liste des produits
        //         }
        //     } catch (error) {
        //         console.error('Erreur lors de la modification:', error);
        //         alert('Erreur lors de la modification du produit');
        //     }
        // }

        // async function supprimerProduit(id) {
        //     try {
        //         if (confirm('Voulez-vous vraiment supprimer ce produit ?')) {
        //             const response = await fetch(`/api/products/${id}`, {
        //                 method: 'DELETE'
        //             });
                    
        //             if (!response.ok) {
        //                 throw new Error(`HTTP error! status: ${response.status}`);
        //             }
                    
        //             alert('Produit supprimé avec succès');
        //             loadProducts(); // Recharger la liste des produits
        //         }
        //     } catch (error) {
        //         console.error('Erreur lors de la suppression:', error);
        //         alert('Erreur lors de la suppression du produit');
        //     }
        // }

        // Ajoutez cette fonction après loadProducts()
        async function voirDetails(id) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const product = await response.json();
                
                // Créer et afficher une modal avec les détails
                const modalHtml = `
                    <div class="modal fade" id="productModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                                <div class="modal-header">
                                    <h5 class="modal-title">Détails du produit: ${product.nom}</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <p><strong>Description:</strong> ${product.description || 'Aucune description'}</p>
                                    <p><strong>Prix:</strong> ${product.prix} €</p>
                                    <p><strong>Stock:</strong> ${product.quantite_stock}</p>
                                    <p><strong>Type:</strong> ${product.type_produit}</p>
                                    <p><strong>Taille:</strong> ${product.taille_id || 'N/A'}</p>
                                    <p><strong>Couleur:</strong> ${product.couleur_id || 'N/A'}</p>
                                    <p><strong>Marque:</strong> ${product.marque_id || 'N/A'}</p>
                                    <p><strong>Matériau:</strong> ${product.materiau_id || 'N/A'}</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Supprimer l'ancienne modal si elle existe
                const oldModal = document.getElementById('productModal');
                if (oldModal) {
                    oldModal.remove();
                }
                
                // Ajouter la nouvelle modal au document
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Afficher la modal
                const modal = new bootstrap.Modal(document.getElementById('productModal'));
                modal.show();
                
            } catch (error) {
                console.error('Erreur lors de la récupération des détails:', error);
                alert('Erreur lors de la récupération des détails du produit');
            }
        }

        // Ajoutez cette fonction JavaScript après les autres fonctions
        async function ajouterProduit() {
            const modalHtml = `
                <div class="modal fade" id="addProductModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                            <div class="modal-header">
                                <h5 class="modal-title">Ajouter un nouveau produit</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="addProductForm">
                                    <div class="mb-3">
                                        <label for="nom" class="form-label">Nom</label>
                                        <input type="text" class="form-control" id="nom" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="description" class="form-label">Description</label>
                                        <textarea class="form-control" id="description" rows="3"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="prix" class="form-label">Prix</label>
                                        <input type="number" class="form-control" id="prix" step="0.01" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="quantite_stock" class="form-label">Quantité en stock</label>
                                        <input type="number" class="form-control" id="quantite_stock" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="taille_id" class="form-label">Taille</label>
                                        <input type="text" class="form-control" id="taille_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="couleur_id" class="form-label">Couleur</label>
                                        <input type="text" class="form-control" id="couleur_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="marque_id" class="form-label">Marque</label>
                                        <input type="text" class="form-control" id="marque_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="materiau_id" class="form-label">Matériau</label>
                                        <input type="text" class="form-control" id="materiau_id">
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                <button type="button" class="btn btn-primary" onclick="soumettreNouveauProduit()">Ajouter</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('addProductModal'));
            modal.show();
        }

        async function soumettreNouveauProduit() {
            try {
                const formData = {
                    nom: document.getElementById('nom').value,
                    description: document.getElementById('description').value,
                    prix: parseFloat(document.getElementById('prix').value),
                    quantite_stock: parseInt(document.getElementById('quantite_stock').value),
                    taille_id: document.getElementById('taille_id').value || null,
                    couleur_id: document.getElementById('couleur_id').value || null,
                    marque_id: document.getElementById('marque_id').value || null,
                    materiau_id: document.getElementById('materiau_id').value || null
                };

                console.log('Envoi des données:', formData);

                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('Réponse du serveur:', result);

                const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                modal.hide();
                document.getElementById('addProductModal').remove();
                
                alert('Produit ajouté avec succès');
                loadProducts();
            } catch (error) {
                console.error('Erreur détaillée:', error);
                alert(`Erreur lors de l'ajout du produit: ${error.message}`);
            }
        }
    </script>
</body>
</html>