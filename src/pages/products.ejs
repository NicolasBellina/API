<!DOCTYPE html>
<html lang="fr" class="h-100">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Produits</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        main {
            flex: 1;
        }
    </style>
</head>
<body class="d-flex flex-column h-100 <%= locals.isAdmin ? 'bg-dark text-white' : '' %>">
    <%- include('../components/header') %>

    <main class="flex-shrink-0">
        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Nos produits</h1>
                <button class="btn btn-success" onclick="ajouterProduit()">
                    <i class="fas fa-plus"></i> Ajouter un produit
                </button>
            </div>
            <div id="products-container" class="row">
                <!-- Les produits seront affichés ici -->
            </div>
        </div>
    </main>

    <%- include('../components/footer') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Fonction pour charger les produits
        async function loadProducts() {
            try {
                const response = await fetch('/api/products', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const products = await response.json();
                const container = document.getElementById('products-container');
                container.innerHTML = ''; // Nettoyer le conteneur
                
                if (!products || products.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">Aucun produit disponible</div>';
                    return;
                }
                
                const isDarkMode = document.body.classList.contains('bg-dark');
                
                products.forEach(product => {
                    const productCard = `
                        <div class="col-md-4 mb-4">
                            <div class="card h-100 ${isDarkMode ? 'bg-dark text-white' : ''} border-primary">
                                <div class="card-body">
                                    <h5 class="card-title">${product.nom}</h5>
                                    <p class="card-text">${product.description || 'Aucune description'}</p>
                                    <div class="mt-3">
                                        <p class="mb-2">
                                            <span class="badge bg-primary">Prix: ${product.prix} €</span>
                                            <span class="badge bg-secondary">Stock: ${product.quantite_stock}</span>
                                        </p>
                                        <p class="mb-2">
                                            <span class="badge bg-info">Type: ${product.type_produit || 'N/A'}</span>
                                            <span class="badge bg-info">Taille: ${product.taille_id || 'N/A'}</span>
                                        </p>
                                        <p class="mb-2">
                                            <span class="badge bg-info">Couleur: ${product.couleur_id || 'N/A'}</span>
                                            <span class="badge bg-info">Marque: ${product.marque_id || 'N/A'}</span>
                                        </p>
                                    </div>
                                    <div class="mt-3 d-flex gap-2 justify-content-between">
                                        <button class="btn btn-outline-primary" onclick="voirDetails(${product.id_produit})">
                                            <i class="fas fa-eye"></i> Voir
                                        </button>
                                        <button class="btn btn-warning" onclick="modifierProduit(${product.id_produit})">
                                            <i class="fas fa-edit"></i> Modifier
                                        </button>
                                        <button class="btn btn-danger" onclick="supprimerProduit(${product.id_produit})">
                                            <i class="fas fa-trash"></i> Supprimer
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', productCard);
                });
                
            } catch (error) {
                console.error('Erreur:', error);
                document.getElementById('products-container').innerHTML = 
                    `<div class="alert alert-danger">Erreur lors du chargement des produits: ${error.message}</div>`;
            }
        }

        // Fonction pour ajouter un produit
        async function ajouterProduit() {
            const modalHtml = `
                <div class="modal fade" id="addProductModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                            <div class="modal-header">
                                <h5 class="modal-title">Ajouter un nouveau produit</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="addProductForm">
                                    <div class="mb-3">
                                        <label for="nom" class="form-label">Nom</label>
                                        <input type="text" class="form-control" id="nom" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="description" class="form-label">Description</label>
                                        <textarea class="form-control" id="description"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="prix" class="form-label">Prix</label>
                                        <input type="number" class="form-control" id="prix" step="0.01" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="quantite_stock" class="form-label">Stock</label>
                                        <input type="number" class="form-control" id="quantite_stock" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="type_produit" class="form-label">Type</label>
                                        <input type="text" class="form-control" id="type_produit">
                                    </div>
                                    <div class="mb-3">
                                        <label for="taille_id" class="form-label">Taille</label>
                                        <input type="text" class="form-control" id="taille_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="couleur_id" class="form-label">Couleur</label>
                                        <input type="text" class="form-control" id="couleur_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="marque_id" class="form-label">Marque</label>
                                        <input type="text" class="form-control" id="marque_id">
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                <button type="button" class="btn btn-primary" onclick="soumettreNouveauProduit()">Ajouter</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('addProductModal'));
            modal.show();
        }

        // Fonction pour soumettre un nouveau produit
        async function soumettreNouveauProduit() {
            try {
                const formData = {
                    nom: document.getElementById('nom').value,
                    description: document.getElementById('description').value,
                    prix: parseFloat(document.getElementById('prix').value),
                    quantite_stock: parseInt(document.getElementById('quantite_stock').value),
                    type_produit: document.getElementById('type_produit').value,
                    taille_id: document.getElementById('taille_id').value || null,
                    couleur_id: document.getElementById('couleur_id').value || null,
                    marque_id: document.getElementById('marque_id').value || null
                };

                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                }

                const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                modal.hide();
                document.getElementById('addProductModal').remove();
                
                await loadProducts();
                alert('Produit ajouté avec succès');
            } catch (error) {
                console.error('Erreur:', error);
                alert(`Erreur lors de l'ajout du produit: ${error.message}`);
            }
        }

        // Fonction pour modifier un produit
        async function modifierProduit(id) {
            try {
                const response = await fetch(`/api/products/${id}`);
                const product = await response.json();
                
                const modalHtml = `
                    <div class="modal fade" id="editProductModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                                <div class="modal-header">
                                    <h5 class="modal-title">Modifier le produit</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="editProductForm">
                                        <div class="mb-3">
                                            <label for="edit_nom" class="form-label">Nom</label>
                                            <input type="text" class="form-control" id="edit_nom" value="${product.nom}" required>
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_description" class="form-label">Description</label>
                                            <textarea class="form-control" id="edit_description">${product.description || ''}</textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_prix" class="form-label">Prix</label>
                                            <input type="number" class="form-control" id="edit_prix" step="0.01" value="${product.prix}" required>
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_quantite_stock" class="form-label">Stock</label>
                                            <input type="number" class="form-control" id="edit_quantite_stock" value="${product.quantite_stock}" required>
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_type_produit" class="form-label">Type</label>
                                            <input type="text" class="form-control" id="edit_type_produit" value="${product.type_produit || ''}">
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_taille_id" class="form-label">Taille</label>
                                            <input type="text" class="form-control" id="edit_taille_id" value="${product.taille_id || ''}">
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_couleur_id" class="form-label">Couleur</label>
                                            <input type="text" class="form-control" id="edit_couleur_id" value="${product.couleur_id || ''}">
                                        </div>
                                        <div class="mb-3">
                                            <label for="edit_marque_id" class="form-label">Marque</label>
                                            <input type="text" class="form-control" id="edit_marque_id" value="${product.marque_id || ''}">
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                    <button type="button" class="btn btn-primary" onclick="soumettreModificationProduit(${id})">Enregistrer</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                const oldModal = document.getElementById('editProductModal');
                if (oldModal) oldModal.remove();
                
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
                modal.show();
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la modification du produit');
            }
        }

        // Fonction pour soumettre la modification d'un produit
        async function soumettreModificationProduit(id) {
            try {
                const formData = {
                    nom: document.getElementById('edit_nom').value,
                    description: document.getElementById('edit_description').value,
                    prix: parseFloat(document.getElementById('edit_prix').value),
                    quantite_stock: parseInt(document.getElementById('edit_quantite_stock').value),
                    type_produit: document.getElementById('edit_type_produit').value,
                    taille_id: document.getElementById('edit_taille_id').value || null,
                    couleur_id: document.getElementById('edit_couleur_id').value || null,
                    marque_id: document.getElementById('edit_marque_id').value || null
                };

                const response = await fetch(`/api/products/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const modal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                modal.hide();
                document.getElementById('editProductModal').remove();

                await loadProducts();
                alert('Produit modifié avec succès');
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la modification du produit');
            }
        }

        // Fonction pour voir les détails d'un produit
        async function voirDetails(id) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }
                
                const product = await response.json();
                
                const modalHtml = `
                    <div class="modal fade" id="productModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content ${document.body.classList.contains('bg-dark') ? 'bg-dark text-white' : ''}">
                                <div class="modal-header">
                                    <h5 class="modal-title">Détails du produit: ${product.nom}</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <p><strong>Description:</strong> ${product.description || 'Aucune description'}</p>
                                    <p><strong>Prix:</strong> ${product.prix} €</p>
                                    <p><strong>Stock:</strong> ${product.quantite_stock}</p>
                                    <p><strong>Type:</strong> ${product.type_produit || 'N/A'}</p>
                                    <p><strong>Taille:</strong> ${product.taille_id || 'N/A'}</p>
                                    <p><strong>Couleur:</strong> ${product.couleur_id || 'N/A'}</p>
                                    <p><strong>Marque:</strong> ${product.marque_id || 'N/A'}</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                const oldModal = document.getElementById('productModal');
                if (oldModal) oldModal.remove();
                
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                const modal = new bootstrap.Modal(document.getElementById('productModal'));
                modal.show();
                
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la récupération des détails du produit');
            }
        }

        // Fonction pour supprimer un produit
        async function supprimerProduit(id) {
            if (confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) {
                try {
                    const response = await fetch(`/api/products/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                    }

                    await loadProducts();
                    alert('Produit supprimé avec succès');
                } catch (error) {
                    console.error('Erreur:', error);
                    alert(`Erreur lors de la suppression du produit: ${error.message}`);
                }
            }
        }

        // Charger les produits au chargement de la page
        window.addEventListener('load', loadProducts);
    </script>
</body>
</html>
